import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  ActivityIndicator,
  Modal,
  TextInput,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  Pressable,
  Alert,
  BackHandler,
  RefreshControl,
} from "react-native";
import { Ionicons, Feather } from "@expo/vector-icons";
import axios from "axios";
import RNPickerSelect from "react-native-picker-select";

const SERVER_URL = "http://192.168.15.136:5000"; // your IP

export default function StudentListScreen() {
  const [students, setStudents] = useState([]);
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editStudent, setEditStudent] = useState(null);
  const [editName, setEditName] = useState("");
  const [editEmail, setEditEmail] = useState("");
  const [editRoll, setEditRoll] = useState("");
  const [editBatch, setEditBatch] = useState("");
  const [editDepartment, setEditDepartment] = useState("");
  const [editCourse, setEditCourse] = useState("");
  const [editFaculty, setEditFaculty] = useState("");
  const [search, setSearch] = useState("");
  const [batches, setBatches] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [courses, setCourses] = useState([]);
  const [faculties, setFaculties] = useState([]);
  const [selectedStudents, setSelectedStudents] = useState([]); // multi select

  useEffect(() => {
    fetchStudents();
    fetchDropdownData();

    const backAction = () => {
      if (selectedStudents.length > 0) {
        setSelectedStudents([]);
        return true; // block going back
      }
      return false; // allow normal back
    };

    const backHandler = BackHandler.addEventListener(
      "hardwareBackPress",
      backAction
    );
    return () => backHandler.remove();
  }, [selectedStudents]);

  useEffect(() => {
    if (search.trim() === "") {
      setFilteredStudents(students);
    } else {
      const filtered = students.filter(
        (s) =>
          s.Name.toLowerCase().includes(search.toLowerCase()) ||
          s.Email.toLowerCase().includes(search.toLowerCase()) ||
          s.Roll_no.toLowerCase().includes(search.toLowerCase())
      );
      setFilteredStudents(filtered);
    }
  }, [search, students]);

  const fetchStudents = async () => {
    setLoading(true);
    try {
      const res = await axios.get(`${SERVER_URL}/admin/students`);
      setStudents(res.data);
      setFilteredStudents(res.data);
    } catch (err) {
      Alert.alert("Error", "Failed to fetch students");
    } finally {
      setLoading(false);
    }
  };

  const fetchDropdownData = async () => {
    try {
      const [batchRes, deptRes, courseRes, facultyRes] = await Promise.all([
        axios.get(`${SERVER_URL}/admin/batches`),
        axios.get(`${SERVER_URL}/admin/departments`),
        axios.get(`${SERVER_URL}/admin/courses`),
        axios.get(`${SERVER_URL}/admin/faculty`),
      ]);
      setBatches(batchRes.data);
      setDepartments(deptRes.data);
      setCourses(courseRes.data);
      setFaculties(facultyRes.data);
    } catch (err) {
      Alert.alert("Error", "Failed to fetch dropdown data");
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await fetchStudents();
    setRefreshing(false);
  };

  const openEditModal = (student) => {
    setEditStudent(student);
    setEditName(student.Name);
    setEditEmail(student.Email);
    setEditRoll(student.Roll_no);
    setEditBatch(student.Batch || "");
    setEditDepartment(student.Dept_ID || "");
    setEditCourse(student.Course_ID || "");
    setEditFaculty(student.Faculty_id || "");
    setModalVisible(true);
  };

  const saveStudentChanges = async () => {
    try {
      await axios.put(
        `${SERVER_URL}/admin/students/${editStudent.Student_id}`,
        {
          Name: editName,
          Email: editEmail,
          Roll_no: editRoll,
          Batch: editBatch,
          Dept_ID: editDepartment,
          Course_ID: editCourse,
          Faculty_id: editFaculty,
          Password: editStudent.Password,
        }
      );
      setModalVisible(false);
      fetchStudents();
    } catch (err) {
      Alert.alert("Error", "Failed to update student");
    }
  };

  const handleDelete = (id, name) => {
    Alert.alert(
      "Delete Student",
      `Are you sure you want to delete "${name}"?`,
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Yes, Delete",
          style: "destructive",
          onPress: async () => {
            try {
              await axios.delete(`${SERVER_URL}/admin/students/${id}`);
              fetchStudents();
            } catch {
              Alert.alert("Error", "Failed to delete student");
            }
          },
        },
      ]
    );
  };

  const handleMultipleDelete = () => {
    Alert.alert(
      "Delete Students",
      `Are you sure you want to delete ${selectedStudents.length} students?`,
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Yes, Delete",
          style: "destructive",
          onPress: async () => {
            try {
              await Promise.all(
                selectedStudents.map((id) =>
                  axios.delete(`${SERVER_URL}/admin/students/${id}`)
                )
              );
              setSelectedStudents([]);
              fetchStudents();
            } catch {
              Alert.alert("Error", "Failed to delete students");
            }
          },
        },
      ]
    );
  };

  const toggleSelect = (id) => {
    if (selectedStudents.includes(id)) {
      setSelectedStudents(selectedStudents.filter((sid) => sid !== id));
    } else {
      setSelectedStudents([...selectedStudents, id]);
    }
  };

  const onLongPressItem = (id) => {
    toggleSelect(id);
  };

  const renderItem = ({ item }) => {
    const isSelected = selectedStudents.includes(item.Student_id);
    return (
      <Pressable
        onPress={() => {
          if (selectedStudents.length > 0) {
            toggleSelect(item.Student_id);
          }
        }}
        onLongPress={() => onLongPressItem(item.Student_id)}
        style={({ pressed }) => [
          styles.itemContainer,
          isSelected && styles.itemSelected,
          pressed && styles.itemPressed,
        ]}
      >
        <View style={styles.itemContent}>
          <View style={styles.avatarCircle}>
            <Text style={styles.avatarText}>
              {item.Name?.charAt(0)?.toUpperCase() || "S"}
            </Text>
          </View>

          <View style={styles.itemInfo}>
            <Text style={styles.itemName}>{item.Name}</Text>
            <Text style={styles.itemSubInfo}>
              {item.Roll_no} | {item.Email}
            </Text>
          </View>

          {isSelected ? (
            <Ionicons name="checkmark-circle" size={28} color="#007bff" />
          ) : (
            <TouchableOpacity
              onPress={() => openEditModal(item)}
              hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
            >
              <Feather
                name="edit"
                size={24}
                color="#007bff"
                style={{ marginLeft: 10 }}
              />
            </TouchableOpacity>
          )}
        </View>
      </Pressable>
    );
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>Students</Text>
        {selectedStudents.length > 0 ? (
          <TouchableOpacity
            style={styles.headerButton}
            onPress={handleMultipleDelete}
            accessibilityLabel={`Delete ${selectedStudents.length} students`}
          >
            <Ionicons name="trash-bin" size={30} color="#d9534f" />
          </TouchableOpacity>
        ) : (
          <TouchableOpacity
            style={styles.headerButton}
            onPress={() =>
              Alert.alert("Add Student", "Add student functionality")
            }
            accessibilityLabel="Add new student"
          >
            <Ionicons name="add-circle-outline" size={34} color="#007bff" />
          </TouchableOpacity>
        )}
      </View>

      <TextInput
        placeholder="Search students by name, email, or roll no"
        value={search}
        onChangeText={setSearch}
        style={styles.searchInput}
        clearButtonMode="while-editing"
      />

      {loading ? (
        <ActivityIndicator
          size="large"
          color="#007bff"
          style={{ marginTop: 40 }}
        />
      ) : filteredStudents.length === 0 ? (
        <Text style={styles.emptyText}>No students found</Text>
      ) : (
        <FlatList
          data={filteredStudents}
          keyExtractor={(item) => item.Student_id.toString()}
          renderItem={renderItem}
          contentContainerStyle={{ paddingBottom: 30 }}
          extraData={selectedStudents}
          refreshControl={
            <RefreshControl
              refreshing={refreshing}
              onRefresh={onRefresh}
              colors={["#007bff"]}
            />
          }
        />
      )}

      {/* Edit Modal */}
      {/* Edit Modal */}
      <Modal visible={modalVisible} transparent animationType="fade">
        <KeyboardAvoidingView
          behavior={Platform.OS === "ios" ? "padding" : "height"}
          style={styles.modalBackground}
        >
          <View style={styles.modalCard}>
            <Text style={styles.modalTitle}>Edit Student</Text>

            <TextInput
              value={editName}
              onChangeText={setEditName}
              placeholder="Name"
              style={styles.input}
              autoCapitalize="words"
              returnKeyType="next"
            />
            <TextInput
              value={editEmail}
              onChangeText={setEditEmail}
              placeholder="Email"
              keyboardType="email-address"
              style={styles.input}
              autoCapitalize="none"
              returnKeyType="next"
            />
            <TextInput
              value={editRoll}
              onChangeText={setEditRoll}
              placeholder="Roll No"
              style={styles.input}
              returnKeyType="next"
            />

            <RNPickerSelect
              placeholder={{ label: "Select Batch...", value: null }}
              value={editBatch}
              onValueChange={setEditBatch}
              items={batches.map((batch) => ({
                label: batch.batch_name,
                value: batch.Batch_id,
              }))}
              style={pickerStyle}
              useNativeAndroidPickerStyle={false}
            />

            <RNPickerSelect
              placeholder={{ label: "Select Department...", value: null }}
              value={editDepartment}
              onValueChange={(value) => {
                setEditDepartment(value);
                setEditCourse("");
                setEditFaculty("");
              }}
              items={departments.map((dept) => ({
                label: dept.Dept_name,
                value: dept.Dept_id,
              }))}
              style={pickerStyle}
              useNativeAndroidPickerStyle={false}
            />

            <RNPickerSelect
              placeholder={{ label: "Select Course...", value: null }}
              value={editCourse}
              onValueChange={setEditCourse}
              items={courses
                .filter((c) => c.Dept_ID === editDepartment)
                .map((course) => ({
                  label: course.Course_name,
                  value: course.Course_ID,
                }))}
              style={pickerStyle}
              useNativeAndroidPickerStyle={false}
            />

            <RNPickerSelect
              placeholder={{ label: "Select Faculty...", value: null }}
              value={editFaculty}
              onValueChange={setEditFaculty}
              items={faculties
                .filter((f) => f.Dept_ID === editDepartment)
                .map((faculty) => ({
                  label: faculty.Name,
                  value: faculty.Faculty_id,
                }))}
              style={pickerStyle}
              useNativeAndroidPickerStyle={false}
            />

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.saveButton}
                onPress={saveStudentChanges}
              >
                <Text style={styles.buttonText}>Save</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.buttonText}>Cancel</Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f9f9f9', padding: 10 },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#007bff',
  },
  headerButton: {
    padding: 5,
  },
  searchInput: {
    backgroundColor: '#fff',
    borderRadius: 10,
    paddingHorizontal: 15,
    paddingVertical: 10,
    fontSize: 16,
    borderColor: '#ccc',
    borderWidth: 1,
    marginBottom: 10,
  },
  itemContainer: {
    backgroundColor: '#fff',
    padding: 12,
    borderRadius: 10,
    marginVertical: 5,
    flexDirection: 'row',
    alignItems: 'center',
    elevation: 2,
  },
  itemSelected: {
    borderColor: '#007bff',
    borderWidth: 2,
    backgroundColor: '#e6f0ff',
  },
  itemPressed: {
    opacity: 0.8,
  },
  itemContent: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  avatarCircle: {
    backgroundColor: '#007bff',
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  avatarText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  itemInfo: {
    flex: 1,
  },
  itemName: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  itemSubInfo: {
    fontSize: 14,
    color: '#555',
    marginTop: 2,
  },
  emptyText: {
    textAlign: 'center',
    fontSize: 16,
    color: '#999',
    marginTop: 40,
  },
  modalBackground: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
    paddingHorizontal: 20,
  },
  modalCard: {
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 20,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#007bff',
    marginBottom: 15,
    textAlign: 'center',
  },
  input: {
    backgroundColor: '#f2f2f2',
    borderRadius: 10,
    paddingHorizontal: 15,
    paddingVertical: 10,
    fontSize: 16,
    marginBottom: 10,
    borderColor: '#ccc',
    borderWidth: 1,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  saveButton: {
    backgroundColor: '#007bff',
    padding: 10,
    borderRadius: 10,
    flex: 1,
    marginRight: 10,
  },
  cancelButton: {
    backgroundColor: '#6c757d',
    padding: 10,
    borderRadius: 10,
    flex: 1,
  },
  buttonText: {
    color: '#fff',
    textAlign: 'center',
    fontWeight: 'bold',
  },
});

const pickerStyle = {
  inputIOS: {
    fontSize: 16,
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    color: '#000',
    paddingRight: 30,
    backgroundColor: '#f2f2f2',
    marginBottom: 10,
  },
  inputAndroid: {
    fontSize: 16,
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    color: '#000',
    paddingRight: 30,
    backgroundColor: '#f2f2f2',
    marginBottom: 10,
  },
  placeholder: {
    color: '#999',
  },
};
